;;; xpra.el --- Making frames through xpra           -*- lexical-binding: t; -*-

;; Copyright (C) 2025

;; Author: Spencer Baugh <sbaugh@catern.com>
;; Keywords: frames

;;; Commentary:

;;

;;; Code:
(require 'comint)
(require 'bindat)

(setq frame-resize-pixelwise t)

(defgroup xpra nil "Xpra-based web frames."
  :group 'environment)

(defcustom xpra-exe "/nix/store/q6q2y4fag7x8yy6p93ayzd2ywfj921gj-xpra-6.2.3/bin/xpra"
  "The xpra executable."
  :type '(string))

(defcustom xpra-html "/nix/store/q6q2y4fag7x8yy6p93ayzd2ywfj921gj-xpra-6.2.3/share/xpra/www"
  "The xpra-html5 client."
  :type '(string))

(defcustom xpra-additional-args
  '("--printing=no" "--webcam=no" "--mdns=no" "--pulseaudio=no" "--audio=no"  "--opengl=no"
    "--dbus-launch="
    "--source=/dev/null" "--splash=no" "--http-scripts=all")
  "Additional args passed to xpra."
  :type '(repeat string))

(defcustom xpra-idle-timeout 30
  "Idle timeout for the xpra frames.

Set to 0 to disable."
  :type '(natnum))

(defcustom xpra-buffer-name "*xpra*"
  "Name for the xpra buffer."
  :type '(string))

(defcustom xpra-nginx-exe "nginx"
  "The nginx executable."
  :type '(string))

(defcustom xpra-ssl-port 10443
  "Port number for nginx to listen on."
  :type '(natnum))

(defcustom xpra-ssl-key "/usr/local/home/sbaugh/.ssl/sbaugh.key"
  "Filename of SSL key to use with xpra.

If nil, use self-signed certs."
  :type '(choice (file :must-match t)
		 (const :tag "Use self-signed." nil)))

(defcustom xpra-nginx-auth #'xpra-nginx-auth-jskrb
  "Nginx configuration for how to authenticate to non-public frames.

If a string, this is included in the non-public location stanza.
If a function, that function is called when Nginx is started to
generate that string."
  :type '(choice (string :tag "Hard-coded authentication config.")
		 (function :tag "Generate authentication config.")))

(defcustom xpra-ssl-cert "/usr/local/home/sbaugh/.ssl/sbaugh.pem"
  "Filename of SSL cert to use with xpra.

If nil, use self-signed certs."
  :type '(choice (file :must-match t)
		 (const :tag "Use self-signed." nil)))

(defvar-local xpra--nginx-process nil)
(defvar-local xpra--fqdn nil)

(defvar xpra-password-bindat-spec
  (bindat-type
    (r0 sint 32 t)
    (r1 sint 32 t)
    (r2 sint 32 t)
    (r3 sint 32 t)))

(defun xpra--make-password ()
  "Return a 256-bit random base64 URL-safe string."
  (base64url-encode-string
   (bindat-pack xpra-password-bindat-spec
		`((r0 . ,(random t)) (r1 . ,(random t)) (r2 . ,(random t)) (r3 . ,(random t))))
   t))

(defun xpra--cd-to-dir ()
  (let ((dir (locate-user-emacs-file "xpra")))
    (make-directory dir t)
    (set-file-modes dir #o700)
    (setq default-directory dir)))

(defun xpra--buffer ()
  (with-current-buffer (get-buffer-create xpra-buffer-name)
    (unless (derived-mode-p 'comint-mode)
      (comint-mode)
      (xpra--cd-to-dir)
      (setq xpra--fqdn (string-trim (shell-command-to-string "hostname --fqdn"))))
    (current-buffer)))

(defun xpra-nginx-auth-basic ()
  (let ((htpasswd "htpasswd"))
    (unless (file-exists-p htpasswd)
      (write-region (format "%s:{PLAIN}%s" user-login-name (xpra--make-password))
		    nil htpasswd))
    "    auth_basic emacs;
    auth_basic_user_file htpasswd;"))

(defun xpra-nginx-auth-jskrb ()
  (let ((keytab "/usr/local/home/sbaugh/.jskrb/sbaugh.keytab"))
    (concat "        auth_gss on;
    auth_gss_allow_basic_fallback off;
    auth_gss_keytab " keytab ";")))

(defun xpra-systemd--make-unit (string name)
  "Create a systemd unit file named NAME with contents STRING."
  (let ((user-dir "~/.config/systemd/user"))
    (make-directory user-dir t)
    (write-region (concat "### Automatically updated by Emacs, do not edit!
" string) nil (file-name-concat user-dir name))))

(defun xpra--nginx-js-conf-write ()
  (let ((default-directory (locate-user-emacs-file "xpra"))
        (config-file "nginx.conf"))
    (make-directory default-directory t)
    (set-file-modes default-directory #o700)
    (write-region (concat "# Generated by xpra.el
load_module /usr/lib64/nginx/modules/ngx_http_auth_spnego_module.so;

error_log stderr;
daemon off;
pid nginx.pid;
events {}
http {
client_body_temp_path tmp;
proxy_temp_path tmp;
fastcgi_temp_path tmp;
uwsgi_temp_path tmp;
scgi_temp_path tmp;

  map $time_iso8601 $time_xpra { ~^([^T]+)T(\\d\\d:\\d\\d:\\d\\d) '$1 $2'; }
  map $msec $just_msec { ~\\d+.(\\d+)$ $1; }
  log_format xpra '$time_xpra,$just_msec [$remote_addr - $remote_user] \"$request\" $status $body_bytes_sent \"$http_referer\" \"$http_user_agent\"';
  access_log syslog:server=unix:/dev/log xpra;
  server {
    listen " (number-to-string xpra-ssl-port) " ssl;
    ssl_certificate     /usr/local/home/" user-login-name "/.ssl/" user-login-name  ".pem;
    ssl_certificate_key /usr/local/home/" user-login-name "/.ssl/" user-login-name  ".key;
    proxy_redirect off;
    proxy_http_version 1.1;
    proxy_buffering off;
    proxy_cache_bypass $http_upgrade;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection Upgrade;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

location ~ ^/(emacs-[^/]+)(/.*)?$ {
    set $uri_path $2;
    if ($uri_path = \"\") { set $uri_path \"/\"; }
    auth_gss on;
    auth_gss_allow_basic_fallback off;
    auth_gss_keytab /usr/local/home/" user-login-name "/.jskrb/" user-login-name ".keytab;
    proxy_pass http://unix:/run/user/" (number-to-string (user-uid)) "/xpra/$1.socket:$uri_path;
}

    root " xpra-html ";
    location =/default-settings.txt { alias "
    (let ((settings-file "default-settings.txt"))
      (write-region "# Xpra HTML5 settings, generated by xpra.el
min-quality = 10
min-speed = 50
floating_menu = no
# because of https://github.com/Xpra-org/xpra-html5/issues/329
offscreen = no
" nil settings-file)
      (expand-file-name settings-file))
    "; }
    location /js { types { application/javascript  js; } }
    location /css { types { text/css css; } }
    location /icons { types { image/png png; } }
}}
") nil config-file)
    (expand-file-name config-file)))

(defun xpra-systemd-install ()
  "Install and enable systemd units to provide web-based Emacsclient frames."
  (interactive)
  (let ((default-directory "~/.config/systemd/user")
        (nginx-service "xpra-nginx.service"))
    (make-directory default-directory t)
    (write-region (concat "### Automatically updated by xpra-systemd-install in Emacs, do not edit!
[Unit]
Description=Xpra nginx

[Service]
Type=simple
ExecStart=" xpra-nginx-exe " -e /dev/stderr -p " (expand-file-name (locate-user-emacs-file "xpra")) " -c " (xpra--nginx-js-conf-write))
                  nil nginx-service)
    (write-region "### Automatically updated by xpra-systemd-install in Emacs, do not edit!
[Unit]
Description=Xpra emacsclient socket %i

[Socket]
ListenStream=%t/xpra/emacs-%i.socket

[Install]
WantedBy=sockets.target" nil "xpra-emacs@.socket")
    (write-region (concat "### Automatically updated by xpra-systemd-install in Emacs, do not edit!
[Unit]
Description=Xpra emacsclient %i
Requires=xpra-emacs@%i.socket

[Service]
Type=simple
Environment=XPRA_EXPORT_MENU_DATA=false
ExecStart=" xpra-exe " start --daemon=no --socket-dirs=%t/xpra " (string-join xpra-additional-args " ") "--server-idle-timeout=" (number-to-string xpra-idle-timeout) " --exit-with-children --terminate-children=yes --start-child=\"/j/office/app/emacs/prod/bin/emacsclient --frame-parameters='((fullscreen . fullboth))' --create-frame\"")
                  nil "xpra-emacs@.service")
    (with-temp-buffer
      ;; --no-block to avoid waiting for the diagnose to complete
      (apply #'call-process "systemctl" nil t nil "--user" "enable" "--now" "--no-block"
             nginx-service
             (mapcar (apply-partially #'format "xpra-emacs@%d.socket") (number-sequence 0 9)))
      (princ (buffer-string)))))

(provide 'xpra)
;;; xpra.el ends here
